import { useEffect, useContext } from 'react';
import { CountriesContext } from '../context/CountriesContext';

/**
 * Hook personalizado para detectar uploads de fotos e atualizar o cache automaticamente.
 * 
 * Funcionalidades:
 * - Escuta eventos de upload de fotos
 * - Atualiza automaticamente o cache de pa√≠ses
 * - Mant√©m dados sincronizados em tempo real
 * 
 * @returns {Object} Objeto com m√©todos para for√ßar atualiza√ß√£o
 */
export const usePhotoUploadListener = () => {
  const { forceRefresh } = useContext(CountriesContext);

  useEffect(() => {
    // Fun√ß√£o para lidar com eventos de upload
    const handlePhotoUpload = (event) => {
      console.log('üì∏ Photo upload detected, refreshing cache...');
      
      // For√ßa atualiza√ß√£o imediata do cache
      forceRefresh();
    };

    // Fun√ß√£o para lidar com eventos de exclus√£o
    const handlePhotoDelete = (event) => {
      console.log('üóëÔ∏è Photo deletion detected, refreshing cache...');
      
      // For√ßa atualiza√ß√£o imediata do cache
      forceRefresh();
    };

    // Fun√ß√£o para lidar com eventos de modifica√ß√£o
    const handlePhotoModify = (event) => {
      console.log('‚úèÔ∏è Photo modification detected, refreshing cache...');
      
      // For√ßa atualiza√ß√£o imediata do cache
      forceRefresh();
    };

    // Escuta eventos customizados de upload
    window.addEventListener('photo-upload', handlePhotoUpload);
    window.addEventListener('photo-delete', handlePhotoDelete);
    window.addEventListener('photo-modify', handlePhotoModify);

    // Escuta eventos de storage (para sincroniza√ß√£o entre abas)
    const handleStorageChange = (event) => {
      if (event.key === 'photo-upload-timestamp') {
        console.log('üì∏ Photo upload detected via storage, refreshing cache...');
        forceRefresh();
      }
    };

    window.addEventListener('storage', handleStorageChange);

    // Cleanup dos event listeners
    return () => {
      window.removeEventListener('photo-upload', handlePhotoUpload);
      window.removeEventListener('photo-delete', handlePhotoDelete);
      window.removeEventListener('photo-modify', handlePhotoModify);
      window.removeEventListener('storage', handleStorageChange);
    };
  }, [forceRefresh]);

  // Fun√ß√£o para disparar evento de upload (usada pelos componentes de upload)
  const triggerPhotoUpload = () => {
    console.log('üì∏ Triggering photo upload event...');
    
    // Dispara evento customizado
    window.dispatchEvent(new CustomEvent('photo-upload'));
    
    // Atualiza timestamp no storage para sincroniza√ß√£o entre abas
    localStorage.setItem('photo-upload-timestamp', Date.now().toString());
  };

  // Fun√ß√£o para disparar evento de exclus√£o
  const triggerPhotoDelete = () => {
    console.log('üóëÔ∏è Triggering photo deletion event...');
    
    window.dispatchEvent(new CustomEvent('photo-delete'));
    localStorage.setItem('photo-upload-timestamp', Date.now().toString());
  };

  // Fun√ß√£o para disparar evento de modifica√ß√£o
  const triggerPhotoModify = () => {
    console.log('‚úèÔ∏è Triggering photo modification event...');
    
    window.dispatchEvent(new CustomEvent('photo-modify'));
    localStorage.setItem('photo-upload-timestamp', Date.now().toString());
  };

  return {
    triggerPhotoUpload,
    triggerPhotoDelete,
    triggerPhotoModify,
  };
};

